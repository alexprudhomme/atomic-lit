import { html, LitElement } from "lit";
import { customElement, property } from "lit/decorators.js";
import {
  buildSearchEngine,
  LogLevel,
  SearchEngine,
  SearchEngineConfiguration,
} from "@coveo/headless";
import i18next, { i18n } from "i18next";

@customElement("atomic-search-interface")
export class AtomicSearchInterface extends LitElement {
  /**
   * A list of non-default fields to include in the query results.
   *
   * Specify the property as an array using a JSON string representation:
   * ```html
   * <atomic-search-interface fields-to-include='["fieldA", "fieldB"]'></atomic-search-interface>
   * ```
   */
  @property()
  public fieldsToInclude: string[] | string = "[]";

  /**
   * The search interface [query pipeline](https://docs.coveo.com/en/180/).
   *
   * If the search interface is initialized using [`initializeWithSearchEngine`](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-search-interface/#initializewithsearchengine), the query pipeline should instead be configured in the target engine.
   */
  @property({ reflect: true }) public pipeline?: string;

  /**
   * The search interface [search hub](https://docs.coveo.com/en/1342/).
   *
   * If the search interface is initialized using [`initializeWithSearchEngine`](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-search-interface/#initializewithsearchengine),
   * the search hub should instead be configured in the target engine.
   */
  @property({ reflect: true })
  public searchHub?: string;

  /**
   * Whether analytics should be enabled.
   */
  @property({ reflect: true })
  public analytics = true;

  /**
   * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items.
   * By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).
   *
   * Example: "America/Montreal"
   */
  @property({ reflect: true })
  public timezone?: string;

  /**
   * The severity level of the messages to log in the console.
   */
  @property({ reflect: true })
  public logLevel?: LogLevel;

  /**
   * The search interface i18next instance.
   */
  @property()
  public i18n: i18n = i18next.createInstance();

  /**
   * The search interface language.
   */
  @property({ reflect: true })
  public language = "en";

  /**
   * The search interface headless engine.
   */
  @property()
  public engine?: SearchEngine;

  /**
   * Whether the state should be reflected in the URL parameters.
   */
  @property({ reflect: true })
  public reflectStateInUrl = true;

  /**
   * The CSS selector for the container where the interface will scroll back to.
   */
  @property({ reflect: true })
  public scrollContainer = "atomic-search-interface";

  /**
   * The language assets path. By default, this will be a relative URL pointing to `./lang`.
   *
   * Example: "/mypublicpath/languages"
   */
  @property({ reflect: true })
  public languageAssetsPath = "./lang";

  /**
   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.
   *
   * Example: "/mypublicpath/icons"
   */
  @property({ reflect: true })
  public iconAssetsPath = "./assets";

  /**
   * Whether the relevance inspector shortcut should be enabled for this interface.
   *
   * The relevance inspector can be opened by holding the Alt key (Option on Mac) while over the interface, and performing a double click.
   *
   * The relevance inspector allows to troubleshoot and debug queries.
   */
  @property({ reflect: true })
  public enableRelevanceInspector = true;

  /**
   * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.
   * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,
   * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers
   * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').
   * Otherwise you may see console errors such as:
   *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]
   *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
   * @example:
   * ```html
   * <script nonce="<YOUR_GENERATED_NONCE>">
   *  import {setNonce} from '@coveo/atomic';
   *  setNonce('<YOUR_GENERATED_NONCE>');
   * </script>
   * ```
   */
  @property({ reflect: true })
  public CspNonce?: string;

  constructor() {
    super();
    // this.initRelevanceInspector();
    // this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(
    //   this,
    //   "CoveoAtomic"
    // );
  }

  connectedCallback() {
    super.connectedCallback();
    // this.store.setLoadingFlag(FirstSearchExecutedFlag);
    // this.updateMobileBreakpoint();
    // this.i18nClone = this.i18n.cloneInstance();
    // this.i18n.addResourceBundle = (
    //   lng: string,
    //   ns: string,
    //   resources: object,
    //   deep?: boolean,
    //   overwrite?: boolean
    // ) => this.addResourceBundleWithWarning(lng, ns, resources, deep, overwrite);
  }

  componentWillLoad() {
    // if (this.CspNonce) {
    //   setNonce(this.CspNonce);
    // }
    // this.initAriaLive();
    // this.initFieldsToInclude();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    // this.unsubscribeUrlManager();
    // this.unsubscribeSearchStatus();
    // window.removeEventListener("hashchange", this.onHashChange);
  }

  initialize(options: SearchEngineConfiguration) {
    this.engine = buildSearchEngine({ configuration: options });
  }

  executeFirstSearch() {
    this.engine?.executeFirstSearch();
  }

  override render() {
    return html`<slot>Atomic-search-interface</slot>`;
  }
}
